From c780835f549a97206d546ddb7947416b0416d6b1 Mon Sep 17 00:00:00 2001
From: percy-g2 <gahlotpercy@gmail.com>
Date: Sun, 26 Jan 2014 02:47:26 -0800
Subject: [PATCH] STE OMX fix

---
 include/binder/MemoryBase.h               |  7 ++-
 include/binder/Parcel.h                   | 29 +++---------
 include/gui/BufferQueue.h                 |  3 ++
 include/gui/ConsumerBase.h                |  5 +-
 include/gui/GLConsumer.h                  |  7 ++-
 include/gui/IGraphicBufferConsumer.h      |  3 +-
 include/gui/IGraphicBufferProducer.h      |  3 +-
 include/ui/Fence.h                        |  2 +-
 include/ui/GraphicBuffer.h                |  3 +-
 libs/binder/Parcel.cpp                    | 10 ++++
 libs/gui/GLConsumer.cpp                   | 77 +++++++++++++++++++------------
 services/surfaceflinger/DisplayDevice.cpp | 19 +++++---
 services/surfaceflinger/DisplayDevice.h   |  2 +
 13 files changed, 98 insertions(+), 72 deletions(-)

diff --git a/include/binder/MemoryBase.h b/include/binder/MemoryBase.h
index 286e0d3..5bf104b 100644
--- a/include/binder/MemoryBase.h
+++ b/include/binder/MemoryBase.h
@@ -34,14 +34,13 @@ public:
     virtual ~MemoryBase();
     virtual sp<IMemoryHeap> getMemory(ssize_t* offset, size_t* size) const;
 
-#ifdef STE_HARDWARE
-    virtual sp<IMemoryHeap> getMemory(long* offset, unsigned int* size) const;
-#endif
-
 protected:
     size_t getSize() const { return mSize; }
     ssize_t getOffset() const { return mOffset; }
     const sp<IMemoryHeap>& getHeap() const { return mHeap; }
+#ifdef STE_HARDWARE
+    virtual sp<IMemoryHeap> getMemory(long* offset, unsigned int* size) const;
+#endif
 
 private:
     size_t          mSize;
diff --git a/include/binder/Parcel.h b/include/binder/Parcel.h
index c95f297..41902e1 100644
--- a/include/binder/Parcel.h
+++ b/include/binder/Parcel.h
@@ -27,8 +27,8 @@
 // ---------------------------------------------------------------------------
 namespace android {
 
-template <typename T> class Flattenable;
 template <typename T> class LightFlattenable;
+class Flattenable;
 class IBinder;
 class IPCThreadState;
 class ProcessState;
@@ -102,9 +102,7 @@ public:
     status_t            writeStrongBinder(const sp<IBinder>& val);
     status_t            writeWeakBinder(const wp<IBinder>& val);
     status_t            writeInt32Array(size_t len, const int32_t *val);
-
-    template<typename T>
-    status_t            write(const Flattenable<T>& val);
+    status_t            write(const Flattenable& val);
 
     template<typename T>
     status_t            write(const LightFlattenable<T>& val);
@@ -159,9 +157,7 @@ public:
     const char16_t*     readString16Inplace(size_t* outLen) const;
     sp<IBinder>         readStrongBinder() const;
     wp<IBinder>         readWeakBinder() const;
-
-    template<typename T>
-    status_t            read(Flattenable<T>& val) const;
+    status_t            read(Flattenable& val) const;
 
     template<typename T>
     status_t            read(LightFlattenable<T>& val) const;
@@ -274,11 +270,10 @@ private:
         virtual status_t unflatten(void const* buffer, size_t size, int const* fds, size_t count) = 0;
     };
 
-    template<typename T>
     class FlattenableHelper : public FlattenableHelperInterface {
         friend class Parcel;
-        const Flattenable<T>& val;
-        explicit FlattenableHelper(const Flattenable<T>& val) : val(val) { }
+        const Flattenable& val;
+        explicit FlattenableHelper(const Flattenable& val) : val(val) { }
 
     public:
         virtual size_t getFlattenedSize() const {
@@ -291,7 +286,7 @@ private:
             return val.flatten(buffer, size, fds, count);
         }
         virtual status_t unflatten(void const* buffer, size_t size, int const* fds, size_t count) {
-            return const_cast<Flattenable<T>&>(val).unflatten(buffer, size, fds, count);
+            return const_cast<Flattenable&>(val).unflatten(buffer, size, fds, count);
         }
     };
     status_t write(const FlattenableHelperInterface& val);
@@ -314,12 +309,6 @@ public:
 // ---------------------------------------------------------------------------
 
 template<typename T>
-status_t Parcel::write(const Flattenable<T>& val) {
-    const FlattenableHelper<T> helper(val);
-    return write(helper);
-}
-
-template<typename T>
 status_t Parcel::write(const LightFlattenable<T>& val) {
     size_t size(val.getFlattenedSize());
     if (!val.isFixedSize()) {
@@ -338,12 +327,6 @@ status_t Parcel::write(const LightFlattenable<T>& val) {
 }
 
 template<typename T>
-status_t Parcel::read(Flattenable<T>& val) const {
-    FlattenableHelper<T> helper(val);
-    return read(helper);
-}
-
-template<typename T>
 status_t Parcel::read(LightFlattenable<T>& val) const {
     size_t size;
     if (val.isFixedSize()) {
diff --git a/include/gui/BufferQueue.h b/include/gui/BufferQueue.h
index 6250dbb..c923e9c 100644
--- a/include/gui/BufferQueue.h
+++ b/include/gui/BufferQueue.h
@@ -43,6 +43,9 @@ class BufferQueue : public BnGraphicBufferProducer,
 public:
     enum { MIN_UNDEQUEUED_BUFFERS = 2 };
     enum { NUM_BUFFER_SLOTS = 32 };
+#ifdef STE_HARDWARE
+    enum { NUM_BLIT_BUFFER_SLOTS = 2 };
+#endif
     enum { NO_CONNECTED_API = 0 };
     enum { INVALID_BUFFER_SLOT = -1 };
     enum { STALE_BUFFER_SLOT = 1, NO_BUFFER_AVAILABLE, PRESENT_LATER };
diff --git a/include/gui/ConsumerBase.h b/include/gui/ConsumerBase.h
index fb21185..74e315c 100644
--- a/include/gui/ConsumerBase.h
+++ b/include/gui/ConsumerBase.h
@@ -164,7 +164,10 @@ protected:
             const sp<GraphicBuffer> graphicBuffer,
             EGLDisplay display, EGLSyncKHR eglFence);
 
-    // returns true iff the slot still has the graphicBuffer in it.
+    // returns true if the slot still has the graphicBuffer in it.
+#ifdef STE_HARDWARE
+    virtual
+#endif
     bool stillTracking(int slot, const sp<GraphicBuffer> graphicBuffer);
 
     // addReleaseFence* adds the sync points associated with a fence to the set
diff --git a/include/gui/GLConsumer.h b/include/gui/GLConsumer.h
index 05e0217..29b6aac 100644
--- a/include/gui/GLConsumer.h
+++ b/include/gui/GLConsumer.h
@@ -256,6 +256,11 @@ protected:
             const sp<GraphicBuffer> graphicBuffer,
             EGLDisplay display, EGLSyncKHR eglFence);
 
+#ifdef STE_HARDWARE
+     // returns true if the slot still has the graphicBuffer in it.
+    virtual bool stillTracking(int slot, const sp<GraphicBuffer> graphicBuffer);
+#endif
+
     status_t releaseBufferLocked(int slot,
             const sp<GraphicBuffer> graphicBuffer, EGLSyncKHR eglFence) {
         return releaseBufferLocked(slot, graphicBuffer, mEglDisplay, eglFence);
@@ -453,7 +458,7 @@ private:
     // mGraphicBufferAlloc is the connection to SurfaceFlinger that is used to
     // allocate new GraphicBuffer objects.
     sp<IGraphicBufferAlloc> mGraphicBufferAlloc;
-    sp<GraphicBuffer> mBlitSlots[NUM_BLIT_BUFFER_SLOTS];
+    sp<GraphicBuffer> mBlitSlots[BufferQueue::NUM_BLIT_BUFFER_SLOTS];
     int mNextBlitSlot;
 #endif
 
diff --git a/include/gui/IGraphicBufferConsumer.h b/include/gui/IGraphicBufferConsumer.h
index 0e35f13..b6a7b7a 100644
--- a/include/gui/IGraphicBufferConsumer.h
+++ b/include/gui/IGraphicBufferConsumer.h
@@ -39,8 +39,7 @@ class IGraphicBufferConsumer : public IInterface {
 public:
 
     // public facing structure for BufferSlot
-    class BufferItem : public Flattenable<BufferItem> {
-        friend class Flattenable<BufferItem>;
+    class BufferItem : public Flattenable {
         size_t getPodSize() const;
         size_t getFlattenedSize() const;
         size_t getFdCount() const;
diff --git a/include/gui/IGraphicBufferProducer.h b/include/gui/IGraphicBufferProducer.h
index a221cba..8f24902 100644
--- a/include/gui/IGraphicBufferProducer.h
+++ b/include/gui/IGraphicBufferProducer.h
@@ -105,8 +105,7 @@ public:
     // and height of the window and current transform applied to buffers,
     // respectively.
 
-    struct QueueBufferInput : public Flattenable<QueueBufferInput> {
-        friend class Flattenable<QueueBufferInput>;
+    struct QueueBufferInput : public Flattenable {
         inline QueueBufferInput(const Parcel& parcel);
         inline QueueBufferInput(int64_t timestamp, bool isAutoTimestamp,
                 const Rect& crop, int scalingMode, uint32_t transform, bool async,
diff --git a/include/ui/Fence.h b/include/ui/Fence.h
index 20466b6..70078bf 100644
--- a/include/ui/Fence.h
+++ b/include/ui/Fence.h
@@ -36,7 +36,7 @@ namespace android {
 // ===========================================================================
 
 class Fence
-    : public LightRefBase<Fence>, public Flattenable<Fence>
+    : public LightRefBase<Fence>, public Flattenable
 {
 public:
     static const sp<Fence> NO_FENCE;
diff --git a/include/ui/GraphicBuffer.h b/include/ui/GraphicBuffer.h
index bca366f..16994bd 100644
--- a/include/ui/GraphicBuffer.h
+++ b/include/ui/GraphicBuffer.h
@@ -44,9 +44,8 @@ class GraphicBuffer
 #else
     RefBase >,
 #endif
-      public Flattenable<GraphicBuffer>
+      public Flattenable
 {
-    friend class Flattenable<GraphicBuffer>;
 public:
 
     enum {
diff --git a/libs/binder/Parcel.cpp b/libs/binder/Parcel.cpp
index 38e019c..5bb0550 100644
--- a/libs/binder/Parcel.cpp
+++ b/libs/binder/Parcel.cpp
@@ -808,6 +808,11 @@ status_t Parcel::writeBlob(size_t len, WritableBlob* outBlob)
     return status;
 }
 
+status_t Parcel::write(const Flattenable& val) {
+    const FlattenableHelper helper(val);
+    return write(helper);
+}
+
 status_t Parcel::write(const FlattenableHelperInterface& val)
 {
     status_t err;
@@ -1184,6 +1189,11 @@ status_t Parcel::readBlob(size_t len, ReadableBlob* outBlob) const
     return NO_ERROR;
 }
 
+status_t Parcel::read(Flattenable& val) const {
+    FlattenableHelper helper(val);
+    return read(helper);
+}
+
 status_t Parcel::read(FlattenableHelperInterface& val) const
 {
     // size
diff --git a/libs/gui/GLConsumer.cpp b/libs/gui/GLConsumer.cpp
index a122283..e40d47d 100644
--- a/libs/gui/GLConsumer.cpp
+++ b/libs/gui/GLConsumer.cpp
@@ -138,13 +138,6 @@ GLConsumer::GLConsumer(const sp<IGraphicBufferConsumer>& bq, uint32_t tex,
 #endif
     mAttached(true)
 {
-#ifdef STE_HARDWARE
-    sp<ISurfaceComposer> composer(ComposerService::getComposerService());
-    mGraphicBufferAlloc = composer->createGraphicBufferAlloc();
-    if (mGraphicBufferAlloc == 0) {
-        ST_LOGE("createGraphicBufferAlloc() failed in SurfaceTexture()");
-    }
-#endif
     ST_LOGV("GLConsumer");
 
     memcpy(mCurrentTransformMatrix, mtxIdentity,
@@ -157,6 +150,12 @@ GLConsumer::GLConsumer(const sp<IGraphicBufferConsumer>& bq, uint32_t tex,
         copybit_open(module, &mBlitEngine);
     }
     ALOGE_IF(!mBlitEngine, "\nCannot open copybit mBlitEngine=%p", mBlitEngine);
+ 
+   sp<ISurfaceComposer> composer(ComposerService::getComposerService());
+          mGraphicBufferAlloc = composer->createGraphicBufferAlloc();
+    if (mGraphicBufferAlloc == 0) {
+        ST_LOGE("createGraphicBufferAlloc() failed in SurfaceTexture()");
+    }
 #endif
 
     mConsumer->setConsumerUsageBits(DEFAULT_USAGE_FLAGS);
@@ -375,6 +374,24 @@ status_t GLConsumer::releaseBufferLocked(int buf,
     return err;
 }
 
+#ifdef STE_HARDWARE
+bool GLConsumer::stillTracking(int slot,
+        const sp<GraphicBuffer> graphicBuffer) {
+    if (slot < 0 || slot >= BufferQueue::NUM_BUFFER_SLOTS) {
+        return false;
+    }
+
+    // For NovaThor check whether the buffer should not be the
+    // case for BlitSlot that is, if it is a film.
+    //
+    // While going to work this should fix random reboots,
+    // because stillTracking method will operate as it should.
+    return ((mSlots[slot].mGraphicBuffer != NULL && mSlots[slot].mGraphicBuffer->handle == graphicBuffer->handle) ||
+            (mBlitSlots[0] != NULL && mBlitSlots[0]->handle == graphicBuffer->handle) ||
+            (mBlitSlots[1] != NULL && mBlitSlots[1]->handle == graphicBuffer->handle));
+}
+#endif
+
 status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
 {
     status_t err = NO_ERROR;
@@ -402,7 +419,8 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
     // re-allocated.
 #ifdef STE_HARDWARE
     sp<GraphicBuffer> textureBuffer;
-    if (conversionIsNeeded(mSlots[buf].mGraphicBuffer)) {
+    if (mSlots[buf].mGraphicBuffer->getPixelFormat() == HAL_PIXEL_FORMAT_YCBCR42XMBN
+     || mSlots[buf].mGraphicBuffer->getPixelFormat() == HAL_PIXEL_FORMAT_YCbCr_420_P) {
         /* deallocate image each time .... */
         if (mEglSlots[buf].mEglImage != EGL_NO_IMAGE_KHR) {
             eglDestroyImageKHR(mEglDisplay, mEglSlots[buf].mEglImage);
@@ -410,44 +428,38 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
         }
         /* test if source and convert buffer size are ok */
         if (mSlots[buf].mGraphicBuffer != NULL && mBlitSlots[mNextBlitSlot] != NULL) {
-            sp<GraphicBuffer> &srcBuf = mSlots[buf].mGraphicBuffer;
-            sp<GraphicBuffer> &dstBuf = mBlitSlots[mNextBlitSlot];
+            sp<GraphicBuffer> srcBuf = mSlots[buf].mGraphicBuffer;
+            sp<GraphicBuffer> dstBuf = mBlitSlots[mNextBlitSlot];
             if (srcBuf->getWidth() != dstBuf->getWidth() || srcBuf->getHeight() != dstBuf->getHeight()) {
                 mBlitSlots[mNextBlitSlot] = NULL;
             }
         }
         /* allocate convert buffer if needed */
         if (mBlitSlots[mNextBlitSlot] == NULL) {
-            sp<GraphicBuffer> &srcBuf = mSlots[buf].mGraphicBuffer;
-            status_t res = 0;
+            status_t res;
+            sp<GraphicBuffer> srcBuf = mSlots[buf].mGraphicBuffer;
             sp<GraphicBuffer> dstBuf(mGraphicBufferAlloc->createGraphicBuffer(srcBuf->getWidth(),
                                                                               srcBuf->getHeight(),
                                                                               PIXEL_FORMAT_RGBA_8888,
                                                                               srcBuf->getUsage(),
                                                                               &res));
             if (dstBuf == 0) {
-                ST_LOGE("updateTexImage: SurfaceComposer::createGraphicBuffer failed");
+                ST_LOGE("updateAndRelease: createGraphicBuffer failed");
                 return NO_MEMORY;
             }
             if (res != NO_ERROR) {
-                ST_LOGW("updateTexImage: SurfaceComposer::createGraphicBuffer error=%#04x", res);
+                ST_LOGW("updateAndRelease: createGraphicBuffer error=%#04x", res);
             }
             mBlitSlots[mNextBlitSlot] = dstBuf;
         }
-        /* allocate image */
-        EGLImageKHR image = createImage(mEglDisplay, mBlitSlots[mNextBlitSlot], item.mCrop);
-        if (image == EGL_NO_IMAGE_KHR) {
-            ST_LOGW("releaseAndUpdate: unable to createImage on display=%p slot=%d", mEglDisplay, buf);
-            return UNKNOWN_ERROR;
-        }
-        mEglSlots[buf].mEglImage = image;
+
         /* convert buffer */
         if (convert(mSlots[buf].mGraphicBuffer, mBlitSlots[mNextBlitSlot]) != OK) {
-            ALOGE("updateTexImage: convert failed");
+            ST_LOGE("updateAndRelease: convert failed");
             return UNKNOWN_ERROR;
         }
         textureBuffer = mBlitSlots[mNextBlitSlot];
-        mNextBlitSlot = (mNextBlitSlot + 1) % NUM_BLIT_BUFFER_SLOTS;
+        mNextBlitSlot = (mNextBlitSlot + 1) % BufferQueue::NUM_BLIT_BUFFER_SLOTS;
     } else {
         textureBuffer = mSlots[buf].mGraphicBuffer;
     }
@@ -455,7 +467,12 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
 
     if (mEglSlots[buf].mEglImage == EGL_NO_IMAGE_KHR) {
         EGLImageKHR image = createImage(mEglDisplay,
-                mSlots[buf].mGraphicBuffer, item.mCrop);
+#ifdef STE_HARDWARE
+                textureBuffer,
+#else
+                mSlots[buf].mGraphicBuffer,
+#endif
+                item.mCrop);
         if (image == EGL_NO_IMAGE_KHR) {
             ST_LOGW("updateAndRelease: unable to createImage on display=%p slot=%d",
                   mEglDisplay, buf);
@@ -472,7 +489,12 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
         // release the old buffer, so instead we just drop the new frame.
         // As we are still under lock since acquireBuffer, it is safe to
         // release by slot.
-        releaseBufferLocked(buf, mSlots[buf].mGraphicBuffer,
+        releaseBufferLocked(buf,
+#ifdef STE_HARDWARE
+                textureBuffer,
+#else
+                mSlots[buf].mGraphicBuffer,
+#endif
                 mEglDisplay, EGL_NO_SYNC_KHR);
         return err;
     }
@@ -1170,11 +1192,6 @@ void GLConsumer::dumpLocked(String8& result, const char* prefix) const
 }
 
 #ifdef STE_HARDWARE
-bool GLConsumer::conversionIsNeeded(const sp<GraphicBuffer>& graphicBuffer) {
-    int fmt = graphicBuffer->getPixelFormat();
-    return (fmt == PIXEL_FORMAT_YCBCR42XMBN) || (fmt == PIXEL_FORMAT_YCbCr_420_P);
-}
-
 status_t GLConsumer::convert(sp<GraphicBuffer> &srcBuf, sp<GraphicBuffer> &dstBuf) {
     copybit_image_t dstImg;
     dstImg.w = dstBuf->getWidth();
diff --git a/services/surfaceflinger/DisplayDevice.cpp b/services/surfaceflinger/DisplayDevice.cpp
index 8af9f5a..3e1e161 100755
--- a/services/surfaceflinger/DisplayDevice.cpp
+++ b/services/surfaceflinger/DisplayDevice.cpp
@@ -78,11 +78,11 @@ DisplayDevice::DisplayDevice(
       mHardwareOrientation(0),
       mOrientation()
 {
-    mNativeWindow = new Surface(producer, false);
-#ifndef BOARD_EGL_NEEDS_LEGACY_FB
-    ANativeWindow* const window = mNativeWindow.get();
+#ifdef STE_HARDWARE
+      ANativeWindow* const window = new FramebufferNativeWindow();
 #else
-    ANativeWindow* const window = new FramebufferNativeWindow();
+      mNativeWindow = new Surface(producer, false);
+      ANativeWindow* const window = mNativeWindow.get();
 #endif
 
     int format;
@@ -495,12 +495,19 @@ void DisplayDevice::dump(String8& result) const {
     const Transform& tr(mGlobalTransform);
     result.appendFormat(
         "+ DisplayDevice: %s\n"
-        "   type=%x, hwcId=%d, layerStack=%u, (%4dx%4d), ANativeWindow=%p, orient=%2d (type=%08x), "
+        "   type=%x, hwcId=%d, layerStack=%u, (%4dx%4d), "
+#ifndef STE_HARDWARE
+        "ANativeWindow=%p, "
+#endif
+        "orient=%2d (type=%08x), "
         "flips=%u, isSecure=%d, secureVis=%d, acquired=%d, numLayers=%u\n"
         "   v:[%d,%d,%d,%d], f:[%d,%d,%d,%d], s:[%d,%d,%d,%d],"
         "transform:[[%0.3f,%0.3f,%0.3f][%0.3f,%0.3f,%0.3f][%0.3f,%0.3f,%0.3f]]\n",
         mDisplayName.string(), mType, mHwcDisplayId,
-        mLayerStack, mDisplayWidth, mDisplayHeight, mNativeWindow.get(),
+        mLayerStack, mDisplayWidth, mDisplayHeight,
+#ifndef STE_HARDWARE
+        mNativeWindow.get(),
+#endif
         mOrientation, tr.getType(), getPageFlipCount(),
         mIsSecure, mSecureLayerVisible, mScreenAcquired, mVisibleLayersSortedByZ.size(),
         mViewport.left, mViewport.top, mViewport.right, mViewport.bottom,
diff --git a/services/surfaceflinger/DisplayDevice.h b/services/surfaceflinger/DisplayDevice.h
index 24ca033..170f392 100644
--- a/services/surfaceflinger/DisplayDevice.h
+++ b/services/surfaceflinger/DisplayDevice.h
@@ -171,7 +171,9 @@ private:
     wp<IBinder> mDisplayToken;
 
     // ANativeWindow this display is rendering into
+#ifndef STE_HARDWARE
     sp<ANativeWindow> mNativeWindow;
+#endif
     sp<DisplaySurface> mDisplaySurface;
 
     EGLDisplay      mDisplay;
-- 
1.8.3.2

